{"version":3,"sources":["Components/Titles.js","Components/SelectButton.js","Components/DisplayWeatherResults.js","Components/Happy.js","Components/Unhappy.js","Components/HeavyCoat.js","Components/LightCoat.js","Components/LongSleeve.js","Components/Hot.js","Components/WeatherDecision.js","App.js","serviceWorker.js","index.js"],"names":["Titles","className","React","Component","SelectButton","onClick","this","props","getTheWeather","DisplayWeatherResults","weatherIconID","imageID","URL","city","temperature","description","src","alt","Happy","document","body","style","background","Unhappy","HeavyCoat","LightCoat","LongSleeve","Hot","WeatherDecision","e","decide","App","state","weatherData","undefined","lat","lon","loading","isHidden","a","preventDefault","fetch","response","json","data","console","log","setState","name","main","temp","weather","icon","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c44a9f4.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default class Titles extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"authorTitle-container\">\r\n          <p>Created by</p>\r\n          <p>:</p>\r\n          <p className=\"authorTitle\">David Buchholz</p>\r\n        </div>\r\n        <p className=\"maintTitle\">Coat Check</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default class SelectButton extends React.Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <button className = \"button\" onClick = {this.props.getTheWeather}>Do I Need My Coat?</button>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\n\r\nexport default class DisplayWeatherResults extends React.Component {\r\n  render() {\r\n    const weatherIconID = this.props.imageID;\r\n    const URL = `https://openweathermap.org/img/wn/${weatherIconID}@2x.png`;\r\n    return (\r\n      <div className=\"displayWeather\">\r\n        <p className = \"location\">Your location is: {this.props.city}</p>\r\n        <p className = \"temperature\">The temperature is currently: {this.props.temperature}</p>\r\n        <div className=\"description-container\">\r\n          <p>Today you can expect: {this.props.description}</p>\r\n          <img className = \"weather-image\" src={URL} alt=\"weather-icon\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default class Happy extends React.Component {\r\n  componentDidMount() {\r\n    document.body.style.background = \"rgb(76, 202, 236) no-repeat\";\r\n    document.body.style.background =\r\n      \"linear-gradient(140deg, rgba(76,202,236,0.5047152650122548) 40%, rgba(236,110,76,0.5047152650122548) 60%) no-repeat fixed\";\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"coat-check\">\r\n        You don't need a coat. Go forth and enjoy your day!\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default class Unhappy extends React.Component{\r\n\r\n    render(){\r\n        return(\r\n            <div className =\"coat-check\">\r\n                Temperature is out of range!..Hope you're safe\r\n            </div>\r\n        );\r\n    }\r\n}","import React from \"react\";\r\n\r\nexport default class HeavyCoat extends React.Component {\r\n  componentDidMount() {\r\n    document.body.style.background = \"rgb(76, 202, 236) no-repeat\";\r\n    document.body.style.background =\r\n      \"linear-gradient(140deg, rgba(76,202,236,0.5047152650122548) 78%, rgba(236,110,76,0.577544396664916) 93%) no-repeat fixed\";\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"coat-check\">\r\n        Grab the thickest coat you can find and hunker down\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default class LightCoat extends React.Component {\r\n  componentDidMount() {\r\n    document.body.style.background = \"rgb(76, 202, 236) no-repeat\";\r\n    document.body.style.background =\r\n      \"linear-gradient(140deg, rgba(76,202,236,0.5047152650122548) 40%, rgba(236,110,76,0.5047152650122548) 60%) no-repeat fixed\";\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"coat-check\">\r\n        Light coat will suffice for your needs\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default class LongSleeve extends React.Component {\r\n  componentDidMount() {\r\n    document.body.style.background = \"rgb(76, 202, 236) no-repeat\";\r\n    document.body.style.background =\r\n      \"linear-gradient(140deg, rgba(76,202,236,0.5047152650122548) 40%, rgba(236,110,76,0.5047152650122548) 60%) no-repeat fixed\";\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"coat-check\">\r\n        Wear a long sleeve...and if that is too much just roll them up, okay?\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default class Hot extends React.Component {\r\n  componentDidMount() {\r\n    document.body.style.background = \"rgb(76, 202, 236) no-repeat\";\r\n    document.body.style.background =\r\n      \"linear-gradient(140deg, rgba(76,202,236,0.5047152650122548) 7%, rgba(236,110,76,0.577544396664916) 22%) no-repeat fixed\";\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"coat-check\">\r\n        It's SO hot! Where are we?..Abu Dhabi??\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Happy from \"./Happy\";\r\nimport Unhappy from \"./Unhappy\";\r\nimport HeavyCoat from \"./HeavyCoat\";\r\nimport LightCoat from \"./LightCoat\";\r\nimport LongSleeve from \"./LongSleeve\";\r\nimport Hot from \"./Hot\";\r\n\r\nexport default class WeatherDecision extends React.Component {\r\n  decide(e) {\r\n    if (this.props.temperature > -20 && this.props.temperature <= 55) {\r\n      return <HeavyCoat />;\r\n    } else if (this.props.temperature > 55 && this.props.temperature <= 65) {\r\n      return <LightCoat />;\r\n    } else if (this.props.temperature > 65 && this.props.temperature <= 70) {\r\n      return <LongSleeve />;\r\n    } else if (this.props.temperature > 70 && this.props.temperature <=90) {\r\n      return <Happy />;\r\n    } else if (this.props.temperature > 90) {\r\n      return <Hot />;\r\n    } else {\r\n      return <Unhappy />;\r\n    }\r\n  }\r\n  render() {\r\n    return <div>{this.decide()}</div>;\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Titles from \"./Components/Titles\";\nimport SelectButton from \"./Components/SelectButton\";\nimport DisplayWeatherResults from \"./Components/DisplayWeatherResults\";\nimport WeatherDecision from \"./Components/WeatherDecision\";\n\nclass App extends React.Component {\n  state = {\n    weatherData: [],\n    city: undefined,\n    temperature: undefined,\n    imageID: undefined,\n    lat: \"\",\n    lon: \"\",\n    loading: true,\n    isHidden: true\n  };\n\n  /*   getTheLocation = async e => {\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(displayLocationInfo);\n  }\n\n  function displayLocationInfo(position) {\n    const long = position.coords.longitude;\n    const lati = position.coords.latitude;\n    this.setState = ({\n      lat: position.coords.latitude,\n      lon: position.coords.longitude\n    }).bind()\n    console.log(`longitude: ${ long } | latitude: ${ lati }`);\n  }\n} */\n  getTheWeather = async e => {\n    e.preventDefault();\n    //const url = `https://api.openweathermap.org/data/2.5/weather?lat=${this.state.lat}&lon=${this.state.lon}&units=imperial&appid=78c8954cfc788e1248bcd83dc32befc8`;\n    const url = `https://api.openweathermap.org/data/2.5/weather?id=5128638&units=imperial&appid=78c8954cfc788e1248bcd83dc32befc8`;\n    const response = await fetch(url);\n    const data = await response.json();\n    console.log(data);\n    this.setState({\n      weatherData: data,\n      city: data.name,\n      temperature: data.main.temp,\n      imageID: data.weather[0].icon,\n      description: data.weather[0].description,\n      loading: false,\n      isHidden: false\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"titles-container\">\n          <Titles />\n        </div>\n        <div className=\"button-container\">\n          <SelectButton getTheWeather={this.getTheWeather} />\n        </div>\n        <div className=\"dialogue-container\">\n          {!this.state\n            .isHidden /*Hide this component until data is fetched from API */ && (\n            <div>\n              <WeatherDecision temperature={this.state.temperature} />\n              <DisplayWeatherResults\n                city={this.state.city}\n                temperature={this.state.temperature}\n                imageID={this.state.imageID}\n                description={this.state.description}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}