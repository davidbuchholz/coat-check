{"version":3,"sources":["Components/Titles.js","Components/SelectButton.js","Components/DisplayWeatherResults.js","Components/Happy.js","Components/Unhappy.js","Components/HeavyCoat.js","Components/LightCoat.js","Components/LongSleeve.js","Components/Hot.js","Components/WeatherDecision.js","App.js","serviceWorker.js","index.js"],"names":["Titles","className","SelectButton","this","props","callAPI","isDisabled","type","onClick","value","disabled","React","Component","DisplayWeatherResults","temperature","imageID","city","description","URL","src","alt","Happy","document","body","style","background","Unhappy","HeavyCoat","LightCoat","LongSleeve","Hot","WeatherDecision","decide","App","state","undefined","location","isHidden","bind","findCoordinates","navigator","geolocation","getCurrentPosition","position","setState","coords","error","console","message","enableHighAccuracy","timeout","maximumAge","log","url","latitude","longitude","process","fetch","then","response","json","data","name","main","temp","weather","icon","catch","Boolean","window","hostname","match","ReactDOM","render","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f657920e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Titles() {\r\n  return (\r\n    <div>\r\n      <div className=\"authorTitle-container\">\r\n        <p>Created by</p>\r\n        <p>:</p>\r\n        <p className=\"authorTitle\">David Buchholz</p>\r\n      </div>\r\n      <p className=\"maintTitle\">Coat Check</p>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default class SelectButton extends React.Component {\r\n  render() {\r\n    const { callAPI, isDisabled } = this.props;\r\n    return (\r\n      <div>\r\n        <input\r\n          type=\"button\"\r\n          className=\"button\"\r\n          onClick={callAPI}\r\n          value=\"Do I Need My Coat?\"\r\n          disabled={isDisabled}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nexport default function DisplayWeatherResults(props) {\r\n  const { temperature, imageID, city, description } = props;\r\n  const URL = `https://openweathermap.org/img/wn/${imageID}@2x.png`;\r\n  return (\r\n    <div className=\"displayWeather\">\r\n      <p className=\"location\">\r\n        Your location is:\r\n        {city}\r\n      </p>\r\n      <p className=\"temperature\">\r\n        The temperature is currently:\r\n        {temperature}\r\n      </p>\r\n      <div className=\"description-container\">\r\n        <p>\r\n          Today you can expect:\r\n          {description}\r\n        </p>\r\n        <img className=\"weather-image\" src={URL} alt=\"weather-icon\" />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default class Happy extends React.Component {\r\n  componentDidMount() {\r\n    document.body.style.background = 'rgb(76, 202, 236) no-repeat';\r\n    document.body.style.background =\r\n      'linear-gradient(140deg, rgba(76,202,236,0.5047152650122548) 40%, rgba(236,110,76,0.5047152650122548) 60%) no-repeat fixed';\r\n  }\r\n\r\n  render() {\r\n    const message = `You don't need a coat. Go forth and enjoy your day!`;\r\n    return <div className=\"coat-check\">{message}</div>;\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nexport default function Unhappy() {\r\n  const message = `Temperature is out of range!..Hope you're safe`;\r\n  return <div className=\"coat-check\">{message}</div>;\r\n}\r\n","import React from 'react';\r\n\r\nexport default class HeavyCoat extends React.Component {\r\n  componentDidMount() {\r\n    document.body.style.background = 'rgb(76, 202, 236) no-repeat';\r\n    document.body.style.background =\r\n      'linear-gradient(140deg, rgba(76,202,236,0.5047152650122548) 78%, rgba(236,110,76,0.577544396664916) 93%) no-repeat fixed';\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"coat-check\">\r\n        Grab the thickest coat you can find and hunker down\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class LightCoat extends React.Component {\r\n  componentDidMount() {\r\n    document.body.style.background = 'rgb(76, 202, 236) no-repeat';\r\n    document.body.style.background =\r\n      'linear-gradient(140deg, rgba(76,202,236,0.5047152650122548) 40%, rgba(236,110,76,0.5047152650122548) 60%) no-repeat fixed';\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"coat-check\">\r\n        Light coat will suffice for your needs\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class LongSleeve extends React.Component {\r\n  componentDidMount() {\r\n    document.body.style.background = 'rgb(76, 202, 236) no-repeat';\r\n    document.body.style.background =\r\n      'linear-gradient(140deg, rgba(76,202,236,0.5047152650122548) 40%, rgba(236,110,76,0.5047152650122548) 60%) no-repeat fixed';\r\n  }\r\n\r\n  render() {\r\n    return <div className=\"coat-check\">Wear a long sleeve...!</div>;\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nexport default class Hot extends React.Component {\r\n  componentDidMount() {\r\n    document.body.style.background = 'rgb(76, 202, 236) no-repeat';\r\n    document.body.style.background =\r\n      'linear-gradient(140deg, rgba(76,202,236,0.5047152650122548) 7%, rgba(236,110,76,0.577544396664916) 22%) no-repeat fixed';\r\n  }\r\n\r\n  render() {\r\n    const message = `It's SO hot! Where are we?..Abu Dhabi??`;\r\n    return <div className=\"coat-check\">{message}</div>;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport Happy from './Happy';\r\nimport Unhappy from './Unhappy';\r\nimport HeavyCoat from './HeavyCoat';\r\nimport LightCoat from './LightCoat';\r\nimport LongSleeve from './LongSleeve';\r\nimport Hot from './Hot';\r\n\r\nexport default class WeatherDecision extends React.Component {\r\n  decide() {\r\n    const { temperature } = this.props;\r\n    if (temperature > -20 && temperature <= 55) {\r\n      return <HeavyCoat />;\r\n    }\r\n    if (temperature > 55 && temperature <= 65) {\r\n      return <LightCoat />;\r\n    }\r\n    if (temperature > 65 && temperature <= 70) {\r\n      return <LongSleeve />;\r\n    }\r\n    if (temperature > 70 && temperature <= 90) {\r\n      return <Happy />;\r\n    }\r\n    if (temperature > 90) {\r\n      return <Hot />;\r\n    }\r\n    return <Unhappy />;\r\n  }\r\n\r\n  render() {\r\n    return <div>{this.decide()}</div>;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Titles from './Components/Titles';\r\nimport SelectButton from './Components/SelectButton';\r\nimport DisplayWeatherResults from './Components/DisplayWeatherResults';\r\nimport WeatherDecision from './Components/WeatherDecision';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      city: undefined,\r\n      temperature: undefined,\r\n      location: undefined,\r\n      imageID: undefined,\r\n      isHidden: true,\r\n      isDisabled: true,\r\n    };\r\n    this.callAPI = this.callAPI.bind(this);\r\n    this.findCoordinates = this.findCoordinates.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.findCoordinates();\r\n  }\r\n\r\n  findCoordinates() {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        position => {\r\n          this.setState({\r\n            location: position.coords,\r\n            isDisabled: false,\r\n          });\r\n        },\r\n        error => console.error(error.message),\r\n        {\r\n          enableHighAccuracy: true,\r\n          timeout: 5000,\r\n          maximumAge: 1000,\r\n        },\r\n      );\r\n    } else {\r\n      console.log(`Geolocation is not supported by your device`);\r\n    }\r\n  }\r\n\r\n  callAPI() {\r\n    const { location } = this.state;\r\n    const url = `https://api.openweathermap.org/data/2.5/weather?lat=${location.latitude}&lon=${location.longitude}&units=imperial&appid=${process.env.REACT_APP_API_KEY}`;\r\n    fetch(url)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        this.setState({\r\n          city: data.name,\r\n          temperature: data.main.temp,\r\n          imageID: data.weather[0].icon,\r\n          description: data.weather[0].description,\r\n          isHidden: false,\r\n        });\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      isHidden,\r\n      temperature,\r\n      city,\r\n      description,\r\n      imageID,\r\n      isDisabled,\r\n    } = this.state;\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"titles-container\">\r\n          <Titles />\r\n        </div>\r\n        <div className=\"button-container\">\r\n          <SelectButton\r\n            callAPI={this.callAPI}\r\n            isDisabled={isDisabled}\r\n          />\r\n        </div>\r\n        <div className=\"dialogue-container\">\r\n          {!isHidden /* Hide this component until data is fetched from API */ && (\r\n            <div>\r\n              <WeatherDecision temperature={temperature} />\r\n              <DisplayWeatherResults\r\n                city={city}\r\n                temperature={temperature}\r\n                imageID={imageID}\r\n                description={description}\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}